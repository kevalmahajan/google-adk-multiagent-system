import wikipedia
from io import BytesIO
import requests
from pptx import Presentation
from pptx.util import Inches, Pt
import logging
logging.basicConfig(level=logging.INFO)


def get_wikipedia_content(query: str) -> str:
    """Fetches the complete content of a Wikipedia page for a given query.
    
    Args:
        query (str): The search query.
    
    Returns:
        str: The full content of the Wikipedia page.
    """
    wikipedia.set_lang("en")
    query = query.strip()

    try:
        page = wikipedia.page(query, auto_suggest=False)
        return page.content
    except wikipedia.exceptions.DisambiguationError as e:
        return f"Your query is ambiguous. Possible options include: {', '.join(e.options[:5])}..."
    except wikipedia.exceptions.PageError:
        return "No Wikipedia page found for that query."
    except Exception as e:
        return f"An error occurred: {str(e)}"


def create_dynamic_presentation(ppt_spec: dict, 
                                output_filename: str = "dynamic_presentation.pptx") -> str:
    """
    Create a dynamic PowerPoint presentation that adapts its slide structure based on the input specification.
    
    Args:
        ppt_spec (dict): A dictionary defining the title and a list of slides with varying layouts and content.
            Example input:
            {
                "title": "Dynamic Presentation Demo",
                "slides": [
                    {
                        "layout": "title_only",
                        "title": "Welcome"
                    },
                    {
                        "layout": "title_content",
                        "title": "Overview",
                        "content": "This slide explains the dynamic input logic."
                    },
                    {
                        "layout": "bullet_slide",
                        "title": "Key Points",
                        "bullets": ["Dynamic layouts", "Flexible content", "Adaptive design"]
                    },
                    {
                        "layout": "image_slide",
                        "title": "Our Product",
                        "image": "https://via.placeholder.com/300.png"
                    }
                ]
            }
        output_filename (str): The name of the PowerPoint file to be saved. Defaults to "dynamic_presentation.pptx".

    Returns:
        str: The status of the file created
    """
    prs = Presentation()

    # Create a title slide using layout index 0 (assumed title slide layout)
    title_slide_layout = prs.slide_layouts[0]
    slide = prs.slides.add_slide(title_slide_layout)
    slide.shapes.title.text = ppt_spec.get("title", "Untitled Presentation")
    if len(slide.placeholders) > 1:
        slide.placeholders[1].text = "Generated by Dynamic PPT Generator"
    
    # Process each dynamic slide
    for spec in ppt_spec.get("slides", []):
        layout_type = spec.get("layout", "default")
        
        # Decide on slide layout based on layout_type:
        if layout_type == "title_only":
            # Use a simple title-only layout (assumed index 5 here, may vary)
            slide_layout = prs.slide_layouts[5]
        elif layout_type == "title_content":
            # Use title + content layout (commonly index 1)
            slide_layout = prs.slide_layouts[1]
        elif layout_type == "bullet_slide":
            # Use title + content layout (for bullet points) or a custom layout (if available)
            slide_layout = prs.slide_layouts[1]
        elif layout_type == "image_slide":
            # Use a layout that supports image insertion. Here we still use layout 1 as a base.
            slide_layout = prs.slide_layouts[1]
        else:
            # Fallback to a default layout
            slide_layout = prs.slide_layouts[1]
        
        slide = prs.slides.add_slide(slide_layout)
        slide.shapes.title.text = spec.get("title", "Untitled Slide")
        
        # Process content dynamically:
        # If there's a "content" key, add it as the main text body.
        if "content" in spec:
            placeholder = slide.placeholders[1]
            text_frame = placeholder.text_frame
            text_frame.clear()
            p = text_frame.add_paragraph()
            p.text = spec["content"]
            p.font.size = Pt(18)
        
        # If "bullets" are provided, add them as bullet points.
        if "bullets" in spec:
            placeholder = slide.placeholders[1]
            text_frame = placeholder.text_frame
            text_frame.clear()
            for bullet in spec["bullets"]:
                p = text_frame.add_paragraph()
                p.text = bullet
                p.level = 0
        
        # If an image is provided, handle the image loading (local file or URL)
        if "image" in spec:
            image_source = spec["image"]
            try:
                if image_source.startswith("http://") or image_source.startswith("https://"):
                    response = requests.get(image_source)
                    response.raise_for_status()
                    image_file = BytesIO(response.content)
                else:
                    image_file = image_source  # local file path
                # Position the image dynamically. You could modify these values based on requirements.
                left = Inches(5.5)
                top = Inches(1.5)
                width = Inches(3)
                slide.shapes.add_picture(image_file, left, top, width=width)
            except Exception as e:
                logging.error(f"Failed to add image '{image_source}': {e}")
        
    prs.save(output_filename)
    logging.info(f"Dynamic presentation saved as '{output_filename}'.")
    return "Presentation created successfully."

